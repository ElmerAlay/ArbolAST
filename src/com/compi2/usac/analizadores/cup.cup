package com.compi2.usac.analizadores; 

import java_cup.runtime.*;
import com.compi2.usac.arbol.Nodo;

parser code 
{:
    public static Nodo padre;   //Creación del nodo padre del árbol
    public int cont = 0;        //Contador utilizado para los id´s de los nodos del árbol

    // Método al que se llama automáticamente ante algún error sintactico.
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    }
 
    // Método al que se llama en el momento en que ya no es posible una recuperación de errores. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
:} 

terminal String equals, entero, id, number;
terminal String plus, minus, by, divided;
terminal String semiColon, colon;

non terminal INICIO, DEC, OP, VALOR, T, ASIG, LID, I;

precedence left plus, minus;
precedence left by, divided; 

start with INICIO; 

INICIO  ::= I:n1   
            {: 
                System.out.println("Bien");
                
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("INICIO");
                nodo.setIdNodo(parser.cont);
                nodo.addHijos((Nodo) n1);
                parser.padre = (Nodo) nodo;
                parser.cont++;

                RESULT = nodo;                
            :}
;

I   ::= I:n1 DEC:n2   
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("I");
            nodo.setIdNodo(parser.cont);
            nodo.addHijos((Nodo) n1);
            nodo.addHijos((Nodo) n2);
            parser.cont++;

            RESULT = nodo;
        :}
    |   DEC:n1
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("I");
            nodo.setIdNodo(parser.cont);
            nodo.addHijos((Nodo) n1);
            parser.cont++;

            RESULT = nodo;
        :}            
;

VALOR ::=   id:n1        
            {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("VALOR");
                nodo.setValor(n1.toString());
                nodo.setIdNodo(parser.cont);
                parser.cont++;

                RESULT = nodo;
            :}
        |   number:n1      
            {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("VALOR");
                nodo.setValor(n1.toString());
                nodo.setIdNodo(parser.cont);
                parser.cont++;

                RESULT = nodo;
            :}
;

OP  ::=  OP:n1 plus OP:n2      
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("OP");
            nodo.setIdNodo(parser.cont);
            nodo.addHijos((Nodo) n1);
            parser.cont++;

            Nodo nodo2 = new Nodo();
            nodo2.setEtiqueta("suma");
            nodo2.setValor("+");
            nodo2.setIdNodo(parser.cont);
            parser.cont++;
            
            nodo.addHijos(nodo2);
            nodo.addHijos((Nodo) n2);
            
            RESULT = nodo;
        :}
    |   OP:n1 minus OP:n2     
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("OP");
            nodo.setIdNodo(parser.cont);
            nodo.addHijos((Nodo) n1);
            parser.cont++;

            Nodo nodo2 = new Nodo();
            nodo2.setEtiqueta("resta");
            nodo2.setValor("-");
            nodo2.setIdNodo(parser.cont);
            parser.cont++;
            
            nodo.addHijos(nodo2);
            nodo.addHijos((Nodo) n2);
            
            RESULT = nodo;
        :}
    |    OP:n1 by OP:n2        
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("OP");
            nodo.setIdNodo(parser.cont);
            nodo.addHijos((Nodo) n1);
            parser.cont++;

            Nodo nodo2 = new Nodo();
            nodo2.setEtiqueta("multiplicacion");
            nodo2.setValor("*");
            nodo2.setIdNodo(parser.cont);
            parser.cont++;

            nodo.addHijos(nodo2);
            nodo.addHijos((Nodo) n2);
            
            RESULT = nodo;
        :}
    |    OP:n1 divided OP:n2
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("OP");
            nodo.setIdNodo(parser.cont);
            nodo.addHijos((Nodo) n1);
            parser.cont++;

            Nodo nodo2 = new Nodo();
            nodo2.setEtiqueta("division");
            nodo2.setValor("/");
            nodo2.setIdNodo(parser.cont);
            parser.cont++;

            nodo.addHijos(nodo2);
            nodo.addHijos((Nodo) n2);
            
            RESULT = nodo;
        :}
    |    minus OP:n1        
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("OP");
            nodo.setIdNodo(parser.cont);
            parser.cont++;

            Nodo nodo2 = new Nodo();
            nodo2.setEtiqueta("menos");
            nodo2.setValor("-");
            nodo2.setIdNodo(parser.cont);
            
            nodo.addHijos(nodo2);
            nodo.addHijos((Nodo) n1);
            parser.cont++;
            
            RESULT = nodo;
        :}
    |    VALOR:n1
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("OP");
            nodo.setIdNodo(parser.cont);
            nodo.addHijos((Nodo) n1);
            parser.cont++;
            
            RESULT = nodo;
        :}   
;

T   ::= id:n1   
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("T");
            nodo.setValor(n1.toString());
            nodo.setIdNodo(parser.cont);
            parser.cont++;
            
            RESULT = nodo;
        :}
    |   ASIG:n1    
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("T");
            nodo.setIdNodo(parser.cont);
            nodo.addHijos((Nodo) n1);
            parser.cont++;

            RESULT = nodo;
        :}
;

LID ::= LID:n1 colon T:n2
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("LID");
            nodo.setIdNodo(parser.cont);
            nodo.addHijos((Nodo) n1);
            parser.cont++;

            Nodo nodo2 = new Nodo();
            nodo2.setEtiqueta("colon");
            nodo2.setValor(",");
            nodo2.setIdNodo(parser.cont);
            parser.cont++;
            
            nodo.addHijos(nodo2);
            nodo.addHijos((Nodo) n2);
            
            RESULT = nodo;
        :}
    |   T:n1
        {:
            Nodo nodo = new Nodo();
            nodo.setEtiqueta("LID");
            nodo.setIdNodo(parser.cont);
            nodo.addHijos((Nodo) n1);
            parser.cont++;

            RESULT = nodo;
        :}
;

ASIG    ::= id:n1 equals OP:n2   
            {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ASIG");
                nodo.setIdNodo(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("Id");
                nodo2.setValor(n1.toString());
                nodo2.setIdNodo(parser.cont);
                parser.cont++;
            
                Nodo nodo3 = new Nodo();
                nodo3.setEtiqueta("Equals");
                nodo3.setValor("=");
                nodo3.setIdNodo(parser.cont);
                parser.cont++;

                nodo.addHijos(nodo2);
                nodo.addHijos(nodo3);
                nodo.addHijos((Nodo) n2);

                RESULT = nodo;
            :}
;

DEC         ::= entero LID:n1 semiColon  
                {:
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("DEC");
                    nodo.setIdNodo(parser.cont);
                    parser.cont++;

                    Nodo nodo2 = new Nodo();
                    nodo2.setEtiqueta("Entero");
                    nodo2.setValor("entero");
                    nodo2.setIdNodo(parser.cont);
                    parser.cont++;

                    Nodo nodo3 = new Nodo();
                    nodo3.setEtiqueta("semiColon");
                    nodo3.setValor(";");
                    nodo3.setIdNodo(parser.cont);
                    parser.cont++;

                    nodo.addHijos(nodo2);
                    nodo.addHijos((Nodo) n1);
                    nodo.addHijos(nodo3);

                    RESULT = nodo;
                :}
            |   error semiColon     {::}
;